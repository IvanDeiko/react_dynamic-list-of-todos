{"version":3,"sources":["components/User.js","components/TodoItem.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["User","props","react_default","a","createElement","name","TodoItem","data","title","completed","toString","components_User","user","TodoList","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loaded","loadItems","bind","assertThisInitialized","sortTable","url","fetch","then","res","json","setState","sort","b","localeCompare","_this2","Promise","all","loadData","_ref","_ref2","slicedToArray","todos","users","map","item","objectSpread","find","id","userId","onClick","components_TodoItem","key","React","Component","App","components_TodoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yRAUeA,MARf,SAAcC,GACZ,OACEC,EAAAC,EAAAC,cAAA,UACGH,EAAMI,OCSEC,MAXf,SAAkBL,GAChB,OACEC,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAKH,EAAMM,KAAKC,OAChBN,EAAAC,EAAAC,cAAA,UAAKH,EAAMM,KAAKE,UAAUC,YAC1BR,EAAAC,EAAAC,cAACO,EAAD,CAAMN,KAAMJ,EAAMM,KAAKK,KAAKP,SCgDnBQ,cApDb,SAAAA,EAAYZ,GAAO,IAAAa,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACjBC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMhB,KACDoB,MAAQ,CACXC,QAAQ,EACRf,KAAM,IAERO,EAAKS,UAAYT,EAAKS,UAAUC,KAAfT,OAAAU,EAAA,EAAAV,CAAAD,IACjBA,EAAKY,UAAYZ,EAAKY,UAAUF,KAAfT,OAAAU,EAAA,EAAAV,CAAAD,IAPAA,wEAUVa,GACP,OAAOC,MAAMD,GACVE,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAtB,GAAI,OAAIA,wCAIhBU,KAAKe,SAAS,SAACX,GAAD,MAAY,CACxBd,KAAMc,EAAMd,KAAK0B,KAAK,SAAC9B,EAAG+B,GAAJ,OAAU/B,EAAEK,MAAM2B,cAAcD,EAAE1B,gDAIhD,IAAA4B,EAAAnB,KACVoB,QAAQC,IAAI,CACVrB,KAAKsB,SAAS,8CACdtB,KAAKsB,SAAS,gDAEbV,KAAK,SAAAW,GAAoB,IAAAC,EAAA1B,OAAA2B,EAAA,EAAA3B,CAAAyB,EAAA,GAAlBG,EAAkBF,EAAA,GAAXG,EAAWH,EAAA,GACxBL,EAAKJ,SAAS,CACZzB,KAAMoC,EAAME,IAAI,SAACC,GAAD,OAAA/B,OAAAgC,EAAA,EAAAhC,CAAA,GACX+B,EADW,CAEdlC,KAAMgC,EAAMI,KAAK,SAAApC,GAAI,OAAIA,EAAKqC,KAAOH,EAAKI,kDAOlD,OACEhD,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQ+C,QAASlC,KAAKM,WAAtB,aACArB,EAAAC,EAAAC,cAAA,UAAQ+C,QAASlC,KAAKS,WAAtB,QACAxB,EAAAC,EAAAC,cAAA,aACEF,EAAAC,EAAAC,cAAA,aACGa,KAAKI,MAAMd,KAAKsC,IAAI,SAACC,GAAD,OAAU5C,EAAAC,EAAAC,cAACgD,EAAD,CAAU7C,KAAMuC,EAAMO,IAAKP,EAAKtC,oBA7CpD8C,IAAMC,WCOdC,MANf,WACE,OACEtD,EAAAC,EAAAC,cAACqD,EAAD,OCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9D,EAAAC,EAAAC,cAAC6D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMzC,KAAK,SAAA0C,GACjCA,EAAaC","file":"static/js/main.0bc2b4b8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction User(props) {\r\n  return (\r\n    <td>\r\n      {props.name}\r\n    </td>\r\n  )\r\n}\r\n\r\nexport default User;\r\n","import React from 'react';\r\nimport User from './User';\r\n\r\nfunction TodoItem(props) {\r\n  return (\r\n    <tr>\r\n      <td>{props.data.title}</td>\r\n      <td>{props.data.completed.toString()}</td>\r\n      <User name={props.data.user.name}/>\r\n    </tr>\r\n  )\r\n}\r\n\r\n\r\nexport default TodoItem;\r\n","import React from 'react';\r\nimport TodoItem from './TodoItem';\r\n\r\nclass TodoList extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      loaded: false,\r\n      data: []\r\n    }\r\n    this.loadItems = this.loadItems.bind(this);\r\n    this.sortTable = this.sortTable.bind(this);\r\n  }\r\n\r\n  loadData(url) {\r\n    return fetch(url)\r\n      .then(res => res.json())\r\n      .then(data => data)\r\n  }\r\n  \r\n  sortTable() {\r\n    this.setState((state) => ({\r\n      data: state.data.sort((a, b) => a.title.localeCompare(b.title))\r\n    }));\r\n  }\r\n\r\n  loadItems() {\r\n    Promise.all([\r\n      this.loadData('https://jsonplaceholder.typicode.com/todos'),\r\n      this.loadData('https://jsonplaceholder.typicode.com/users')\r\n    ])\r\n      .then(([todos, users]) => {\r\n        this.setState({\r\n          data: todos.map((item) => ({\r\n            ...item,\r\n            user: users.find(user => user.id === item.userId)\r\n          }))\r\n        });\r\n      });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <button onClick={this.loadItems}>Load Data</button>\r\n        <button onClick={this.sortTable}>Sort</button>\r\n        <table>\r\n          <tbody>      \r\n            {this.state.data.map((item) => <TodoItem data={item} key={item.title}/>)}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default TodoList;\r\n","import React from 'react';\nimport './App.css';\nimport TodoList from './components/TodoList';\n\nfunction App() {\n  return (\n    <TodoList/>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}